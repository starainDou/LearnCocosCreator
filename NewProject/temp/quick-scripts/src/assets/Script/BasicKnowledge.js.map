{"version":3,"sources":["assets/Script/BasicKnowledge.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import JSBig from \"big.js\";\n\nexport default class BasicKnowwledge {\n\n    static readonly sharedInstance: BasicKnowwledge = new BasicKnowwledge();\n\n    public testStart() {\n        this.testDataType();\n        this.testPrint();\n        this.testNumber();\n    }\n    /**\n     * 简单数据类型\n     * let 声明块级作用域的变量\n     * var 声明全局作用域或函数作用域的变量，存在变量提升现象\n     * const 声明常量，声明时必须赋值，一旦赋值同一作用域不能在再重新赋值，但定义的引用类型，可以改变内部数据\n     */\n    public testDataType() {\n        // 指定类型\n        const str: string =  'Home page string';\n        const num: number = 1; // ts不具体区分 int float double\n        const isRequesting: boolean = false;\n        let result: undefined = undefined;\n        let variable:null = null;\n        console.log(str + \" 类型是：\" + typeof str);\n        console.log(num + \" 类型是：\" + typeof num);\n        console.log(isRequesting + \" 类型是：\" + typeof isRequesting);\n        console.log(result + \" 类型是：\" + typeof result);\n        console.log(variable + \" 类型是：\" + typeof variable);\n\n        // let/const 不允许先用后声明，这种现象称为：暂时性死区，英文为：temporal dead zone，简称 TDZ。\n        // var允许声明前使用（变量提升）\n        // console.log(name); // Block-scoped variable 'name' used before its declaration\n        console.log(\"age \" + age + \" 类型是：\" + typeof age); // age undefined 类型是：undefined\n        // console.log(\"id \" + id + \" 类型是：\" + typeof id);\n        // 自动推断类型(类型推导)\n        let name = 'First page string';\n        // let 变量不能重复声明，var变量可以重复声明，只得到最后一次声明的变量\n        var age = 18;\n        var age = 18.8; // 覆盖上次的声明\n        const id = '12580';\n        console.log(\"name: \" + name + \" 类型是：\" + typeof name);\n        console.log(\"age \" + age + \" 类型是：\" + typeof age); // age 18.8 类型是：number\n        console.log(\"id \" + id + \" 类型是：\" + typeof id);\n        {\n            const firstName = 'Wang';\n            let lastName = 'Ming';\n            var grade = 6;\n            console.log(\"firstName \" + firstName + \" 类型是：\" + typeof firstName);\n            console.log(\"lastName \" + lastName + \" 类型是：\" + typeof lastName);\n            console.log(\"grade \" + grade + \" 类型是：\" + typeof grade);\n        }\n        const firstName = 'Li';\n        console.log(\"firstName \" + firstName + \" 类型是：\" + typeof firstName);\n        // let 作用域为代码块，var 作用域为函数或全局\n        // console.log(\"lastName \" + lastName + \" 类型是：\" + typeof lastName);\n        console.log(\"grade \" + grade + \" 类型是：\" + typeof grade);\n    }\n    /**\n     * console.log(a) 打印a的值\n     * typeof a 获取a的类型\n     */\n    public testPrint() {\n        // 存在变量提升\n        for (var i = 0; i <= 2; i++) {\n            console.log(\"print3:\" + i);\n            setTimeout(() => {\n                console.log(\"print4:\" + i);\n            });\n        }\n        for (let i = 0; i <= 2; i++) {\n            console.log(\"print5:\" + i);\n            setTimeout(() => {\n                console.log(\"print6:\" + i);\n            });\n        }\n        for (var i = 0; i <= 2; i++) {\n            console.log(\"print1:\" + i);\n        }\n        for (let i = 0; i <= 2; i++) {\n            console.log(\"print2:\" + i);\n        }\n        // 顺序是 print3:[0 1 2]  print5:[0 1 2] print1:[0 1 2] print2:[0 1 2]  print4:[3 3 3] print6:[0 1 2] \n        // print4 为何输出了大于2的值3,且值都相同？ \n        // 大于3：ts/js是单线程，异步的setTimeout()会等同步代码执行完之后才开始计时，此时i为跳出循环的值:3\n        // 都相同：print6 let修饰异步setTimeout()捕获当前创建的变量，print4 var修饰，作用域为函数，被捕获的是同一个变量。\n        // var变量提升hoisting，将变量和函数声明移动到所在作用域的顶部，分两个阶段\n        // 声明阶段：变量名被提升到作用域顶部，但不会赋值。如果函数声明，函数整个定义也会被提升\n        // 初始化阶段：代码执行到变量声明位置时，会被实际赋值，如果代码中没有显示的赋值操作，那么变量被初始化为 undefined\n    }\n\n    /**\n     * testNumber\n     * Number.MAX_SAFE_INTEGER 精度范围内能表示的整数最大值 2^53 - 1 = 9007199254740991，超过该值发生精度问题\n     * Number.MIN_SAFE_INTEGER 精度范围内能表示的整数最大值 -2^53 + 1 = -9007199254740991\n     * Number.MAX_VALUE 精度范围内最大值 1.7976931348623157e+308\n     * Number.MIN_VALUE 精度范围内最小值 5e-324\n     * Infinity 无穷大 (-Infinity 负无穷大)\n     * 想表示更大数，可以用 bigint等 如 decimal.js bignumber.js big.js\n     * 精度问题：浮点数时，某些十进制小数可能无法用精确的二进制表示，如 0.1 + 0.2 可能产生一个 0.30000000000000004\n     */\n    public testNumber() {\n        let value: number = 0.1 + 0.2; // 不会精确等于 0.3\n        console.log(value); // 输出可能是 0.30000000000000004\n\n        let safeInt1: number = Number.MAX_SAFE_INTEGER + 1; // 超出安全整数范围\n        let safeInt2: number = Number.MAX_SAFE_INTEGER + 2; // 超出安全整数范围\n        console.log(safeInt1 === safeInt2); // 输出可能是 true，因为精度丢失\n\n        // npm install big.js\n        const bigNumber:JSBig = new JSBig('999998888877777444445555566666333332222211111');\n        console.log(bigNumber.plus(new JSBig(10)).toString());\n    }\n}\n\n// https://blog.csdn.net/qq_44749491/article/details/127439175"]}