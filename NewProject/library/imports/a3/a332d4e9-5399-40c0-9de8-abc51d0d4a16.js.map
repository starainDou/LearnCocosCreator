{"version":3,"sources":["assets/Script/Test/EncryptUtil.ts"],"names":[],"mappings":";;;;;AAAA;;;;;GAKG;;;AAEH,uCAAiC;AAEjC;;;;;;;GAOG;AACH;IAAA;IA8EA,CAAC;IA1EG;;;OAGG;IACI,eAAG,GAAV,UAAW,GAAW;QAClB,OAAO,mBAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxC,CAAC;IAED,aAAa;IACN,sBAAU,GAAjB,UAAkB,GAAW,EAAE,EAAU;QACrC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,EAAE,GAAG,mBAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACI,sBAAU,GAAjB,UAAkB,GAAW,EAAE,GAAW,EAAE,EAAU;QAClD,OAAO,mBAAQ,CAAC,GAAG,CAAC,OAAO,CACvB,GAAG,EACH,IAAI,CAAC,GAAG,EACR;YACI,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,MAAM,EAAE,IAAI,CAAC,aAAa;SAC7B,CACJ,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACI,sBAAU,GAAjB,UAAkB,GAAW,EAAE,GAAW,EAAE,EAAU;QAClD,IAAM,SAAS,GAAG,mBAAQ,CAAC,GAAG,CAAC,OAAO,CAClC,GAAG,EACH,IAAI,CAAC,GAAG,EACR;YACI,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,MAAM,EAAE,IAAI,CAAC,aAAa;SAC7B,CACJ,CAAC;QACF,OAAO,SAAS,CAAC,QAAQ,CAAC,mBAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAlDc,eAAG,GAAW,IAAK,CAAC;IACpB,cAAE,GAA2B,IAAK,CAAC;IAmDnC,yBAAa,GAAG;QAC3B,SAAS,EAAE,UAAU,YAAiB;YAClC,IAAM,OAAO,GAAQ,EAAE,EAAE,EAAE,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,mBAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YACnF,IAAI,YAAY,CAAC,EAAE,EAAE;gBACjB,OAAO,CAAC,EAAE,GAAG,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;aAC3C;YACD,IAAI,YAAY,CAAC,IAAI,EAAE;gBACnB,OAAO,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;aAC5C;YACD,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;QACD,KAAK,EAAE,UAAU,OAAY;YACzB,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACpC,IAAM,YAAY,GAAG,mBAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CACjD,EAAE,UAAU,EAAE,mBAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CACxD,CAAC;YACF,IAAI,OAAO,CAAC,EAAE,EAAE;gBACZ,YAAY,CAAC,EAAE,GAAG,mBAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;aACvD;YACD,IAAI,OAAO,CAAC,CAAC,EAAE;gBACX,YAAY,CAAC,IAAI,GAAG,mBAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;aACxD;YACD,OAAO,YAAY,CAAC;QACxB,CAAC;KACJ,CAAC;IACN,kBAAC;CA9ED,AA8EC,IAAA;AA9EY,kCAAW","file":"","sourceRoot":"/","sourcesContent":["/*\n * @Author: dgflash\n * @Date: 2022-09-02 09:28:00\n * @LastEditors: doudianyu doudianyu@huixuanjiasu.com\n * @LastEditTime: 2024-03-11 21:09:16\n */\n\nimport cryptoes from \"crypto-es\";\n\n/** \n * CryptoES 加密库封装 \n * https://github.com/entronad/crypto-es\n * \n * 安装第三方库生效\n * npm install -g yarn\n * yarn add crypto-es\n */\nexport class EncryptUtil {\n    private static key: string = null!;\n    private static iv: cryptoes.lib.WordArray = null!;\n\n    /**\n     * MD5加密\n     * @param msg 加密信息\n     */\n    static md5(msg: string): string {\n        return cryptoes.MD5(msg).toString();\n    }\n\n    /** 初始化加密库 */\n    static initCrypto(key: string, iv: string) {\n        this.key = key;\n        this.iv = cryptoes.enc.Hex.parse(iv);\n    }\n\n    /**\n     * AES 加密\n     * @param msg 加密信息\n     * @param key aes加密的key \n     * @param iv  aes加密的iv\n     */\n    static aesEncrypt(msg: string, key: string, iv: string): string {\n        return cryptoes.AES.encrypt(\n            msg,\n            this.key,\n            {\n                iv: this.iv,\n                format: this.JsonFormatter\n            },\n        ).toString();\n    }\n\n    /**\n     * AES 解密\n     * @param str 解密字符串\n     * @param key aes加密的key \n     * @param iv  aes加密的iv\n     */\n    static aesDecrypt(str: string, key: string, iv: string): string {\n        const decrypted = cryptoes.AES.decrypt(\n            str,\n            this.key,\n            {\n                iv: this.iv,\n                format: this.JsonFormatter\n            },\n        );\n        return decrypted.toString(cryptoes.enc.Utf8);\n    }\n\n    private static JsonFormatter = {\n        stringify: function (cipherParams: any) {\n            const jsonObj: any = { ct: cipherParams.ciphertext.toString(cryptoes.enc.Base64) };\n            if (cipherParams.iv) {\n                jsonObj.iv = cipherParams.iv.toString();\n            }\n            if (cipherParams.salt) {\n                jsonObj.s = cipherParams.salt.toString();\n            }\n            return JSON.stringify(jsonObj);\n        },\n        parse: function (jsonStr: any) {\n            const jsonObj = JSON.parse(jsonStr);\n            const cipherParams = cryptoes.lib.CipherParams.create(\n                { ciphertext: cryptoes.enc.Base64.parse(jsonObj.ct) },\n            );\n            if (jsonObj.iv) {\n                cipherParams.iv = cryptoes.enc.Hex.parse(jsonObj.iv)\n            }\n            if (jsonObj.s) {\n                cipherParams.salt = cryptoes.enc.Hex.parse(jsonObj.s)\n            }\n            return cipherParams;\n        },\n    };\n}"]}